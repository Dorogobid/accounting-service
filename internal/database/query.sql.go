// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package database

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (
    name,
    client_type_id,
    tax_code, 
    address, 
    phone_number
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, name, client_type_id, tax_code, address, phone_number
`

type CreateClientParams struct {
	Name         string `json:"name"`
	ClientTypeID int64  `json:"client_type_id"`
	TaxCode      string `json:"tax_code"`
	Address      string `json:"address"`
	PhoneNumber  string `json:"phone_number"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.Name,
		arg.ClientTypeID,
		arg.TaxCode,
		arg.Address,
		arg.PhoneNumber,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientTypeID,
		&i.TaxCode,
		&i.Address,
		&i.PhoneNumber,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients
WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClientTypes = `-- name: GetClientTypes :many
SELECT id, name FROM client_types ORDER BY id
`

func (q *Queries) GetClientTypes(ctx context.Context) ([]ClientType, error) {
	rows, err := q.db.QueryContext(ctx, getClientTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ClientType
	for rows.Next() {
		var i ClientType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClients = `-- name: GetClients :many
SELECT id, name, client_type_id, tax_code, address, phone_number FROM clients ORDER BY name
`

func (q *Queries) GetClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, getClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ClientTypeID,
			&i.TaxCode,
			&i.Address,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientsByType = `-- name: GetClientsByType :many
SELECT id, name, client_type_id, tax_code, address, phone_number FROM clients
WHERE client_type_id=$1 ORDER BY name
`

func (q *Queries) GetClientsByType(ctx context.Context, clientTypeID int64) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, getClientsByType, clientTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ClientTypeID,
			&i.TaxCode,
			&i.Address,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientsWithType = `-- name: GetClientsWithType :many
SELECT cl.id, cl.name, cl.client_type_id, cl.tax_code, cl.address, cl.phone_number, ct.name as type_name FROM clients cl, client_types ct WHERE cl.client_type_id=ct.id ORDER BY name
`

type GetClientsWithTypeRow struct {
	ID           int32  `json:"id"`
	Name         string `json:"name"`
	ClientTypeID int64  `json:"client_type_id"`
	TaxCode      string `json:"tax_code"`
	Address      string `json:"address"`
	PhoneNumber  string `json:"phone_number"`
	TypeName     string `json:"type_name"`
}

func (q *Queries) GetClientsWithType(ctx context.Context) ([]GetClientsWithTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, getClientsWithType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClientsWithTypeRow
	for rows.Next() {
		var i GetClientsWithTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ClientTypeID,
			&i.TaxCode,
			&i.Address,
			&i.PhoneNumber,
			&i.TypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients
SET name=$2,
    client_type_id=$3,
    tax_code=$4,
    address=$5,
    phone_number=$6
WHERE id = $1
RETURNING id, name, client_type_id, tax_code, address, phone_number
`

type UpdateClientParams struct {
	ID           int32  `json:"id"`
	Name         string `json:"name"`
	ClientTypeID int64  `json:"client_type_id"`
	TaxCode      string `json:"tax_code"`
	Address      string `json:"address"`
	PhoneNumber  string `json:"phone_number"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.ID,
		arg.Name,
		arg.ClientTypeID,
		arg.TaxCode,
		arg.Address,
		arg.PhoneNumber,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ClientTypeID,
		&i.TaxCode,
		&i.Address,
		&i.PhoneNumber,
	)
	return i, err
}
